CTRL + F - Comando pra procurar o codigo

CTRL + TAB - move o codigo a esquerda

TAB - move o codigo a direita

CTRL + Z - coloca o codigo em comentario


JavaScript
* Salva os dados
* Gera o html
* Faz ele interactivo



* Quando se tem muitos produtos o aconselhavel e 
adicionar dentro de um aray, porque um array representa uma lista. 

*E quando o produto tem muitos dados, 
o melhor e usar um object, pois ele agrupa multiplos valores.

Data Attribute - e um atributo html que permite atacar informacoes para um
elemento html. 
Syntax: nome + valor = data-product-name="${product.name}"


Modulos
* Contem uma variavel dentro de um ficheiro, entao se houver outra variavel com
mesmo nome, nao  ira sofrer nenhum conflito de nomenclatura.
Existem 3 passos pra adicionar: 
- Add o type="module" src="./scripts/amazon.js"></script>
- Exportar
- Importar


radio selector - 

External Library - e um codigo que esta fora do nosso 
projecto e pode correr atraves da internet. Ele permite percorrer um codigo
 fora do projecto, dentro do nosso arquivo JS. 
 Basta colocar a URL dentro de script: "https://unpkg.com/supersimpledev@1.0.1/hello.js"
  
ESM (EcmaScript Module) Version - e uma versao da biblioteca que trabalha
 com o modulos javascript

 Default Export - e outra maneira de esportar coisa atraves de um ficheiro

 shorthand property - 



 Model - View - Controller (MVC) - E uma tecnica para atualizar os dados e regenerar todo o HTML.
 O MVC em vez de atualizar a pagina directamente com o DOM, atualizamos nossos dados e entao regeneramos todo HTML.
 Model: salva e faz a gestao dos dados;
 Views: pega os dados e mostra na pagina; (gerar o HTML)
 Controller: percorre o codigo quando nos interagimos com a pagina. (torna interativo)




ERROS
 * Sempre que tiver um erro no inspct, tem haver com uma falha  no dado no Local Storage, basta colocar no inspect: localStorage.clear()
 * Se aparecer um erro de object object signfica que salvei alguma coisa directamente dentro do Local Storage 

 Test Framework
 E uma biblioteca externa que ajuda nos a escrever testes facilmente.
 Os test frameworks sao: Jasmine

JASMINE
Em Jasmine spec = test
Em Jasmine temos o describe ele cria um grupo de specs
Mocks - e um metodo que cria uma versao falsa daquilo que queremos retornar
SpyOn - e um metodo 
Hooks - corre algum codigo ou funcao antes de realizar um teste
done() - este parametro faz com que o paramentro beforeAll() nao va automaticamente para o proximo passo.



POO - Programacao Orientada a Objectos
Representa o mundo real
* Para mover uma variavel dentro de um objecto, converte-se dentro de uma propriedade e uma variavel;
* Funcao dentro de um objecto, chama-se Metodo;
* o recurso This da nos o objecto exterior que contem em uma funcao;
* POO cria multiplos objectos;
* Para conversao de nomes usa-se PascalCase para criar ou gerar objects
* As classes geram os objectos, tornando-os faceis de criar;
* Cada objecto que geramos de uma class chama-se Instancia da class;
* As classes sao compostas por construtor: que corre configuracoes do codigo,
   depois de criar um objecto;

Propriedades Privadas e Metodos em POO
* Propriedade Privada: means that the propriedade so pode apenas ser acessado dentro da class;
* field = property

* O map em POO e basicamente colocar cada valor dentro de um array

Heranca - reusa o codigo entre as classes, por exemplo: 'class Clothing extends Product {}'
*     super(productDetails); //chama ou liga o constructor da class pai (Product)

Polimorfismo - podemos usar um metodo sem saber exatamente a que class pertence. 

* built in class - por exemplo: new date() = gera um objecto que representa data atuais
* this - aponta para um objecto externo, pode ser usado em qualquer lugar do codigo;
       - O Arrow Functions nao altera o valor do this. 
       - O this dentro de um metodo aponta para o metodo;
       - This numa funcao = undefined;



 Backend
 * message = request  

GET: pega informacao do backend
POST:
PUT:
DELETE:    

* JSON.parse() - converte o backend dentro do Object JavaScript
* send() - e assincrono, isso signififca que ele pode enviar uma requisicao, e nao esperar a resposta.
* callback -
* Promises - uma forma boa de lidar com codigo assincrono e e similar ao done() e ao resolve() que tambem e similar ao done()
* Promise.all() - corre multiplos promises ao mesmo tempo
* Fetch() - uma boa forma de fazer HTTP Requests

20:16:30

